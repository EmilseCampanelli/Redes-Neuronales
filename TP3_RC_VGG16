{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TP3_IA.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EmilseCampanelli/Redes-Neuronales/blob/main/TP3_RC_VGG16\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5LwJpKNbrIPK"
      },
      "source": [
        "from keras.optimizers import SGD, Adam\n",
        "import tensorflow as tf\n",
        "from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.applications.vgg16 import VGG16\n",
        "from tensorflow.keras.models import *\n",
        "from keras.optimizers import Adam\n",
        "from keras.losses import binary_crossentropy\n",
        "from keras.metrics import accuracy\n",
        "from tensorflow.keras.layers import *\n",
        "from tensorflow.keras.models import *\n",
        "from tensorflow.keras.layers import *\n",
        "from tensorflow.keras.layers import Dropout, Flatten, Dense\n",
        "from keras.applications.imagenet_utils import preprocess_input\n",
        "from tensorflow.python.keras import backend as k\n",
        "import matplotlib.image as img\n",
        "import matplotlib.pyplot as plot\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4HOh2f1NrgPm"
      },
      "source": [
        "#------------------\n",
        "# Limpiar para entrenar\n",
        "#------------------\n",
        "\n",
        "k.clear_session()\n",
        "\n",
        "data_entrenamiento = '/content/drive/MyDrive/Inteligencia_Artificial_RedesComvolucionales/train'\n",
        "data_validacion= '/content/drive/MyDrive/Inteligencia_Artificial_RedesComvolucionales/test'  "
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8mEfnbJKrlLZ"
      },
      "source": [
        "#------------------\n",
        "# Parametros\n",
        "#------------------\n",
        "\n",
        "epocas= 50\n",
        "altura, longitud = 224 , 224\n",
        "batch_size=16"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VGu0PEFkrsLw",
        "outputId": "5f2226ec-2a93-438f-87a5-8b4c6be40050"
      },
      "source": [
        "#------------------------------\n",
        "# Pre Procesamiento de imagens\n",
        "#------------------------------\n",
        "\n",
        "entrenamiento_datagen = ImageDataGenerator(\n",
        "    rescale= 1./255,\n",
        "    shear_range= 0.3,\n",
        "    zoom_range= 0.3,\n",
        "    horizontal_flip= True,\n",
        "    preprocessing_function=preprocess_input\n",
        ")\n",
        "\n",
        "validacion_datagen= ImageDataGenerator(\n",
        "    rescale= 1./255,\n",
        "    preprocessing_function=preprocess_input\n",
        ")\n",
        "\n",
        "imagen_entrenamiento = entrenamiento_datagen.flow_from_directory(\n",
        "    data_entrenamiento,\n",
        "    target_size= (altura, longitud),\n",
        "    batch_size= batch_size,\n",
        "    class_mode= 'binary'\n",
        ")\n",
        "imagen_validacion = validacion_datagen.flow_from_directory(\n",
        "    data_validacion,\n",
        "    target_size= (altura, longitud),\n",
        "    batch_size= batch_size,\n",
        "    class_mode= 'binary'\n",
        ")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 5232 images belonging to 2 classes.\n",
            "Found 624 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K9u7ACAOrx3c",
        "outputId": "6907acf1-2f65-46b8-c15a-d250c47ca984"
      },
      "source": [
        "#----------------------------\n",
        "# Crear la red convolucional\n",
        "#----------------------------\n",
        "\n",
        "inputShape= (altura, longitud, 3)\n",
        "\n",
        "model= VGG16(include_top=False, weights='imagenet', input_shape=inputShape)\n",
        "\n",
        "for layer in model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "58892288/58889256 [==============================] - 0s 0us/step\n",
            "Model: \"vgg16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 224, 224, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
            "=================================================================\n",
            "Total params: 14,714,688\n",
            "Trainable params: 0\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WwNAJUOPr1c_"
      },
      "source": [
        "#-------------------\n",
        "# Crear red neuronal \n",
        "#-------------------\n",
        "\n",
        "def load_fc_layers(model):\n",
        "    flat = Flatten()(model.layers[-1].output)\n",
        "    dense = Dense(256, activation='relu',kernel_initializer='he_uniform')(flat)\n",
        "    drop = Dropout(0.5)(dense)  \n",
        "    output = Dense(1, activation= 'softmax')(drop)\n",
        "    model= Model(inputs= model.inputs, outputs=output)\n",
        "    \n",
        "    return model"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CutGHXoWr5w7",
        "outputId": "916fdba0-b4ce-4611-e6e3-dd174c3a9405"
      },
      "source": [
        "fullModel = load_fc_layers(model)\n",
        "fullModel.summary()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 224, 224, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 25088)             0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 256)               6422784   \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 257       \n",
            "=================================================================\n",
            "Total params: 21,137,729\n",
            "Trainable params: 6,423,041\n",
            "Non-trainable params: 14,714,688\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hG8kicCOr95L"
      },
      "source": [
        "#---------------\n",
        "# Compile\n",
        "#---------------\n",
        "\n",
        "adam = Adam(learning_rate=0.001)\n",
        "\n",
        "fullModel.compile(\n",
        "    optimizer= adam,\n",
        "    loss= 'binary_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TCxnw3zEsDY2",
        "outputId": "001fe32d-19ec-424c-ca46-40c7aa506d50"
      },
      "source": [
        "#--------------\n",
        "# Entrenar\n",
        "#--------------\n",
        "history = fullModel.fit(\n",
        "    imagen_entrenamiento,\n",
        "    validation_data=imagen_validacion,\n",
        "    epochs=epocas\n",
        ")"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "327/327 [==============================] - 1764s 5s/step - loss: 0.2968 - accuracy: 0.7422 - val_loss: 0.2274 - val_accuracy: 0.6250\n",
            "Epoch 2/50\n",
            "327/327 [==============================] - 116s 354ms/step - loss: 0.1764 - accuracy: 0.7422 - val_loss: 0.1755 - val_accuracy: 0.6250\n",
            "Epoch 3/50\n",
            "327/327 [==============================] - 115s 352ms/step - loss: 0.1686 - accuracy: 0.7422 - val_loss: 0.1576 - val_accuracy: 0.6250\n",
            "Epoch 4/50\n",
            "327/327 [==============================] - 115s 351ms/step - loss: 0.1536 - accuracy: 0.7422 - val_loss: 0.1611 - val_accuracy: 0.6250\n",
            "Epoch 5/50\n",
            "327/327 [==============================] - 115s 351ms/step - loss: 0.1533 - accuracy: 0.7422 - val_loss: 0.1323 - val_accuracy: 0.6250\n",
            "Epoch 6/50\n",
            "327/327 [==============================] - 115s 351ms/step - loss: 0.1497 - accuracy: 0.7422 - val_loss: 0.1464 - val_accuracy: 0.6250\n",
            "Epoch 7/50\n",
            "327/327 [==============================] - 115s 351ms/step - loss: 0.1531 - accuracy: 0.7422 - val_loss: 0.1378 - val_accuracy: 0.6250\n",
            "Epoch 8/50\n",
            "327/327 [==============================] - 115s 353ms/step - loss: 0.1423 - accuracy: 0.7422 - val_loss: 0.1496 - val_accuracy: 0.6250\n",
            "Epoch 9/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.1283 - accuracy: 0.7422 - val_loss: 0.1393 - val_accuracy: 0.6250\n",
            "Epoch 10/50\n",
            "327/327 [==============================] - 117s 357ms/step - loss: 0.1334 - accuracy: 0.7422 - val_loss: 0.2157 - val_accuracy: 0.6250\n",
            "Epoch 11/50\n",
            "327/327 [==============================] - 117s 358ms/step - loss: 0.1305 - accuracy: 0.7422 - val_loss: 0.1907 - val_accuracy: 0.6250\n",
            "Epoch 12/50\n",
            "327/327 [==============================] - 116s 355ms/step - loss: 0.1241 - accuracy: 0.7422 - val_loss: 0.2100 - val_accuracy: 0.6250\n",
            "Epoch 13/50\n",
            "327/327 [==============================] - 115s 353ms/step - loss: 0.1239 - accuracy: 0.7422 - val_loss: 0.2644 - val_accuracy: 0.6250\n",
            "Epoch 14/50\n",
            "327/327 [==============================] - 115s 353ms/step - loss: 0.1277 - accuracy: 0.7422 - val_loss: 0.1512 - val_accuracy: 0.6250\n",
            "Epoch 15/50\n",
            "327/327 [==============================] - 117s 357ms/step - loss: 0.1175 - accuracy: 0.7422 - val_loss: 0.1551 - val_accuracy: 0.6250\n",
            "Epoch 16/50\n",
            "327/327 [==============================] - 117s 357ms/step - loss: 0.1173 - accuracy: 0.7422 - val_loss: 0.1349 - val_accuracy: 0.6250\n",
            "Epoch 17/50\n",
            "327/327 [==============================] - 116s 354ms/step - loss: 0.1202 - accuracy: 0.7422 - val_loss: 0.1297 - val_accuracy: 0.6250\n",
            "Epoch 18/50\n",
            "327/327 [==============================] - 116s 354ms/step - loss: 0.1178 - accuracy: 0.7422 - val_loss: 0.1439 - val_accuracy: 0.6250\n",
            "Epoch 19/50\n",
            "327/327 [==============================] - 115s 352ms/step - loss: 0.1234 - accuracy: 0.7422 - val_loss: 0.1326 - val_accuracy: 0.6250\n",
            "Epoch 20/50\n",
            "327/327 [==============================] - 116s 353ms/step - loss: 0.1117 - accuracy: 0.7422 - val_loss: 0.1625 - val_accuracy: 0.6250\n",
            "Epoch 21/50\n",
            "327/327 [==============================] - 115s 353ms/step - loss: 0.1051 - accuracy: 0.7422 - val_loss: 0.1381 - val_accuracy: 0.6250\n",
            "Epoch 22/50\n",
            "327/327 [==============================] - 116s 356ms/step - loss: 0.1056 - accuracy: 0.7422 - val_loss: 0.1802 - val_accuracy: 0.6250\n",
            "Epoch 23/50\n",
            "327/327 [==============================] - 116s 354ms/step - loss: 0.1064 - accuracy: 0.7422 - val_loss: 0.1367 - val_accuracy: 0.6250\n",
            "Epoch 24/50\n",
            "327/327 [==============================] - 116s 353ms/step - loss: 0.1177 - accuracy: 0.7422 - val_loss: 0.1326 - val_accuracy: 0.6250\n",
            "Epoch 25/50\n",
            "327/327 [==============================] - 116s 354ms/step - loss: 0.1060 - accuracy: 0.7422 - val_loss: 0.1637 - val_accuracy: 0.6250\n",
            "Epoch 26/50\n",
            "327/327 [==============================] - 116s 356ms/step - loss: 0.1083 - accuracy: 0.7422 - val_loss: 0.1640 - val_accuracy: 0.6250\n",
            "Epoch 27/50\n",
            "327/327 [==============================] - 116s 356ms/step - loss: 0.1038 - accuracy: 0.7422 - val_loss: 0.1408 - val_accuracy: 0.6250\n",
            "Epoch 28/50\n",
            "327/327 [==============================] - 117s 357ms/step - loss: 0.1076 - accuracy: 0.7422 - val_loss: 0.1777 - val_accuracy: 0.6250\n",
            "Epoch 29/50\n",
            "327/327 [==============================] - 115s 353ms/step - loss: 0.1140 - accuracy: 0.7422 - val_loss: 0.1649 - val_accuracy: 0.6250\n",
            "Epoch 30/50\n",
            "327/327 [==============================] - 117s 356ms/step - loss: 0.0983 - accuracy: 0.7422 - val_loss: 0.1516 - val_accuracy: 0.6250\n",
            "Epoch 31/50\n",
            "327/327 [==============================] - 117s 357ms/step - loss: 0.1024 - accuracy: 0.7422 - val_loss: 0.1597 - val_accuracy: 0.6250\n",
            "Epoch 32/50\n",
            "327/327 [==============================] - 117s 359ms/step - loss: 0.1021 - accuracy: 0.7422 - val_loss: 0.1444 - val_accuracy: 0.6250\n",
            "Epoch 33/50\n",
            "327/327 [==============================] - 117s 359ms/step - loss: 0.0914 - accuracy: 0.7422 - val_loss: 0.1553 - val_accuracy: 0.6250\n",
            "Epoch 34/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.1001 - accuracy: 0.7422 - val_loss: 0.1620 - val_accuracy: 0.6250\n",
            "Epoch 35/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0975 - accuracy: 0.7422 - val_loss: 0.1516 - val_accuracy: 0.6250\n",
            "Epoch 36/50\n",
            "327/327 [==============================] - 118s 359ms/step - loss: 0.0992 - accuracy: 0.7422 - val_loss: 0.1452 - val_accuracy: 0.6250\n",
            "Epoch 37/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0999 - accuracy: 0.7422 - val_loss: 0.1650 - val_accuracy: 0.6250\n",
            "Epoch 38/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0846 - accuracy: 0.7422 - val_loss: 0.2133 - val_accuracy: 0.6250\n",
            "Epoch 39/50\n",
            "327/327 [==============================] - 118s 359ms/step - loss: 0.0780 - accuracy: 0.7422 - val_loss: 0.1688 - val_accuracy: 0.6250\n",
            "Epoch 40/50\n",
            "327/327 [==============================] - 120s 366ms/step - loss: 0.1015 - accuracy: 0.7422 - val_loss: 0.1480 - val_accuracy: 0.6250\n",
            "Epoch 41/50\n",
            "327/327 [==============================] - 119s 362ms/step - loss: 0.0974 - accuracy: 0.7422 - val_loss: 0.1495 - val_accuracy: 0.6250\n",
            "Epoch 42/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.1023 - accuracy: 0.7422 - val_loss: 0.1886 - val_accuracy: 0.6250\n",
            "Epoch 43/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0981 - accuracy: 0.7422 - val_loss: 0.2054 - val_accuracy: 0.6250\n",
            "Epoch 44/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0955 - accuracy: 0.7422 - val_loss: 0.1716 - val_accuracy: 0.6250\n",
            "Epoch 45/50\n",
            "327/327 [==============================] - 119s 364ms/step - loss: 0.0961 - accuracy: 0.7422 - val_loss: 0.1737 - val_accuracy: 0.6250\n",
            "Epoch 46/50\n",
            "327/327 [==============================] - 120s 366ms/step - loss: 0.0957 - accuracy: 0.7422 - val_loss: 0.1401 - val_accuracy: 0.6250\n",
            "Epoch 47/50\n",
            "327/327 [==============================] - 118s 360ms/step - loss: 0.0908 - accuracy: 0.7422 - val_loss: 0.1233 - val_accuracy: 0.6250\n",
            "Epoch 48/50\n",
            "327/327 [==============================] - 117s 359ms/step - loss: 0.1007 - accuracy: 0.7422 - val_loss: 0.1355 - val_accuracy: 0.6250\n",
            "Epoch 49/50\n",
            "327/327 [==============================] - 116s 355ms/step - loss: 0.0908 - accuracy: 0.7422 - val_loss: 0.1930 - val_accuracy: 0.6250\n",
            "Epoch 50/50\n",
            "327/327 [==============================] - 116s 355ms/step - loss: 0.0913 - accuracy: 0.7422 - val_loss: 0.1459 - val_accuracy: 0.6250\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "Y1RZ9LM6sGyA",
        "outputId": "ad8f6d5b-1bc2-433e-8c32-44d078da4ebe"
      },
      "source": [
        "#-----------------\n",
        "# Graficas\n",
        "#-----------------\n",
        "history.history\n",
        "plt.plot(range(len(history.history['loss'])), history.history['loss'], color='red')\n",
        "plt.plot(range(len(history.history['val_loss'])), history.history['val_loss'], color='blue')\n",
        "plt.plot(history.history['loss'], label='Loss')\n",
        "plt.plot(history.history['val_loss'], label='Val_Loss')\n",
        "#plt.set_title(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(range(len(history.history['accuracy'])), history.history['accuracy'], color='red')\n",
        "plt.plot(range(len(history.history['val_accuracy'])), history.history['val_accuracy'], color='blue')\n",
        "plt.plot(history.history['accuracy'], label='accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Val_accuracy')\n",
        "#plt.set_title(\"Accuracy\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}